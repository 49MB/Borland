/**
 * Copyright (c) 1996-2004 Borland Software Corp. All Rights Reserved.
 *
 * This SOURCE CODE FILE, which has been provided by Borland as part
 * of a Borland product for use ONLY by licensed users of the product,
 * includes CONFIDENTIAL and PROPRIETARY information of Borland.
 *
 * USE OF THIS SOFTWARE IS GOVERNED BY THE TERMS AND CONDITIONS
 * OF THE LICENSE STATEMENT AND LIMITED WARRANTY FURNISHED WITH
 * THE PRODUCT.
 *
 * IN PARTICULAR, YOU WILL INDEMNIFY AND HOLD BORLAND, ITS RELATED
 * COMPANIES AND ITS SUPPLIERS, HARMLESS FROM AND AGAINST ANY
 * CLAIMS OR LIABILITIES ARISING OUT OF THE USE, REPRODUCTION, OR
 * DISTRIBUTION OF YOUR PROGRAMS, INCLUDING ANY CLAIMS OR LIABILITIES
 * ARISING OUT OF OR RESULTING FROM THE USE, MODIFICATION, OR
 * DISTRIBUTION OF PROGRAMS OR FILES CREATED FROM, BASED ON, AND/OR
 * DERIVED FROM THIS SOURCE CODE FILE.
 */
//--------------------------------------------------------------------------------------------------
// Copyright (c) 1996 - 2004 Borland Software Corporation. All Rights Reserved.
//--------------------------------------------------------------------------------------------------
package com.borland.jbcl.editors;

import com.borland.dx.dataset.Variant;

public class DataTypeEditor extends IntegerTagEditor
{
  public DataTypeEditor() {
    super(values, getResourceStrings(), sourceStrings, true);
  }

  // Order in this array MUST MATCH order in sourceStrings[] below
  static int[] values = {
    Variant.UNASSIGNED_NULL,
    Variant.ASSIGNED_NULL,
    Variant.BYTE,
    Variant.SHORT,
    Variant.INT,
    Variant.LONG,
    Variant.FLOAT,
    Variant.DOUBLE,
    Variant.BIGDECIMAL,
    Variant.BOOLEAN,
    Variant.INPUTSTREAM,
    Variant.DATE,
    Variant.TIME,
    Variant.TIMESTAMP,
    Variant.STRING,
    Variant.OBJECT,
//    Variant.BYTE_ARRAY,
  };

  // The values as they must appear in source code when generated by the VCD
  static String[] sourceStrings = {
    "com.borland.dx.dataset.Variant.UNASSIGNED_NULL", 
    "com.borland.dx.dataset.Variant.ASSIGNED_NULL",   
    "com.borland.dx.dataset.Variant.BYTE",       
    "com.borland.dx.dataset.Variant.SHORT",      
    "com.borland.dx.dataset.Variant.INT",        
    "com.borland.dx.dataset.Variant.LONG",       
    "com.borland.dx.dataset.Variant.FLOAT",      
    "com.borland.dx.dataset.Variant.DOUBLE",     
    "com.borland.dx.dataset.Variant.BIGDECIMAL", 
    "com.borland.dx.dataset.Variant.BOOLEAN",    
    "com.borland.dx.dataset.Variant.INPUTSTREAM",     
    "com.borland.dx.dataset.Variant.DATE",       
    "com.borland.dx.dataset.Variant.TIME",       
    "com.borland.dx.dataset.Variant.TIMESTAMP",  
    "com.borland.dx.dataset.Variant.STRING",     
    "com.borland.dx.dataset.Variant.OBJECT",     
//    "com.borland.dx.dataset.Variant.BYTE_ARRAY",  //NORES
  };

  static String[] getResourceStrings()
  {
    // We populate the resource strings strictly from the values[] array
    // so that reshuffling the order won't affect us
    String[] resourceStrings = new String[values.length /*Variant.MaxTypes*/];
    for (int i = 0; i < values.length; ++i) {
      resourceStrings[i] = Variant.typeName(values[i]);
      //if (Variant.typeOf(resourceStrings[i]) != values[i])
      //  System.err.println("values[" + i + "] containing " + values[i] + " is not " + resourceStrings[i]);
    }
    return resourceStrings;
  }

  /**
   * Returns the source code string for a given Variant data type
   */
  public static String getSourceCode(int iType) {
    if (iType < 0)
      iType = 0;
    return sourceStrings[iType];
  }

  /**
   * Returns the name as used in source code -- used by the DataTypeChoiceEditor
   */
/*
*  public static String sourceName(int type)
*  {
*    switch (type) {
*      case AssignedNull:      return "AssignedNull";   
*      case UnassignedNull:    return "UnassignedNull"; 
*
*      case ByteType:          return "ByteType";       
*      case ShortType:         return "ShortType";      
*      case IntType:           return "IntType";        
*      case LongType:          return "LongType";       
*      case RealType:          return "RealType";       
*      case FloatType:         return "FloatType";      
*      case DoubleType:        return "DoubleType";     
*      case BigDecimalType:    return "BigDecimalType"; 
*      case BooleanType:       return "BooleanType";    
*      case BinaryType:        return "BinaryType";     
*      case DateType:          return "DateType";       
*      case TimeType:          return "TimeType";       
*      case TimestampType:     return "TimestampType";  
*      case StringType:        return "StringType";     
*      case ByteArrayType:     return "ByteArrayType";  
*      case ObjectType:        return "ObjectType";     
*      default:                return "UnknownType";    
*    }
*  }
*/
}
